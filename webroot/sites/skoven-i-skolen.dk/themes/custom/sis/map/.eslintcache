[{"/Users/mortenvallentinnissen/Work/novicell/skoven-i-skolen.dk/webroot/sites/skoven-i-skolen.dk/themes/custom/sis/map/src/index.js":"1","/Users/mortenvallentinnissen/Work/novicell/skoven-i-skolen.dk/webroot/sites/skoven-i-skolen.dk/themes/custom/sis/map/src/App.js":"2","/Users/mortenvallentinnissen/Work/novicell/skoven-i-skolen.dk/webroot/sites/skoven-i-skolen.dk/themes/custom/sis/map/src/Map.js":"3","/Users/mortenvallentinnissen/Work/novicell/skoven-i-skolen.dk/webroot/sites/skoven-i-skolen.dk/themes/custom/sis/map/src/MeasurementDetails.js":"4"},{"size":220,"mtime":1672397073302,"results":"5","hashOfConfig":"6"},{"size":187,"mtime":1672397073209,"results":"7","hashOfConfig":"6"},{"size":19934,"mtime":1672397077328,"results":"8","hashOfConfig":"6"},{"size":8525,"mtime":1672397073289,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13w3r0n",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mortenvallentinnissen/Work/novicell/skoven-i-skolen.dk/webroot/sites/skoven-i-skolen.dk/themes/custom/sis/map/src/index.js",[],"/Users/mortenvallentinnissen/Work/novicell/skoven-i-skolen.dk/webroot/sites/skoven-i-skolen.dk/themes/custom/sis/map/src/App.js",[],"/Users/mortenvallentinnissen/Work/novicell/skoven-i-skolen.dk/webroot/sites/skoven-i-skolen.dk/themes/custom/sis/map/src/Map.js",["19","20","21","22"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Divider, Grid, Spin, Button, message } from \"antd\";\n\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Marker,\n\n} from \"react-simple-maps\";\nimport { Spring, config } from \"react-spring/renderprops\";\nimport ReactTooltip from \"react-tooltip\";\nimport MeasurementDetails from \"./MeasurementDetails\";\nimport { ExceptionMap } from \"antd/lib/result\";\n\nimport dataFileFlensborgFjord from \"./Flensborg Fjord.xlsx\";\nimport dataFileHorsensFjord from \"./Horsens Fjord.xlsx\";\nimport dataFileLimfjorden from \"./Limfjorden.xlsx\";\nimport dataFileMariagerFjord from \"./Mariager Fjord (Dybet).xlsx\";\nimport dataFileOdenseFjord from \"./Odense Fjord.xlsx\";\nimport dataFileOeresund from \"./Øresund.xlsx\";\n\n\nconst { useBreakpoint } = Grid;\n\nconst Map = () => {\n  const [zoom, setZoom] = useState(1);\n  const [center, setCenter] = useState([11.8, 56.15]);\n  const [shouldAnimate, setShouldAnimate] = useState(false);\n\n  const [markers, setMarkers] = useState([]);\n  const [simpleMarkers, setSimpleMarkers] = useState([]);\n  const [depthMarkers, setDepthMarkers] = useState([]);\n  const [dataMarkers, setDataMarkers] = useState([]);\n\n  const [table, setTable] = useState('simple');\n  const [basicIsActive, setBasicIsActive] = useState(true);\n  const [depthIsActive, setDepthIsActive] = useState(false);\n  const [datafilesIsActive, setDatafilesIsActive] = useState(false);\n\n\n  const [tooltip, setTooltip] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [activeMeasurements, setActiveMeasurements] = useState(null);\n  const screens = useBreakpoint();\n  const mapWidth = screens.md ? 800 : 600;\n  const mapHeight = screens.md ? 600 : 800;\n\n  /**\n   * Henter data og arrangerer disse i objekter \"measurements\", som hver især samler målinger fra identiske geografiske positioner.\n   * Hver position/measurement har følgende attributter :\n   * oplysninger om positionen, type (f.eks. \"sample\") OG et nyt objekt som indeholder dato og resultat for seneste målinger af de forskellige stoftyper (ex: oxygen, ammounium, nitrate, phosphor)\n   * Desuden er de rå data fra dataudtrækket/servicekaldet også tilføjet under key: \"raw\" (disse indeholder jo positionen og resultatet, så det er måske overflødigt at gentage dem som egne attributter)\n   *\n   * @returns array af markers - som er en array af measurements OG partners\n   */\n  const fetchMeasurements = async () => {\n    setLoading(true);\n\n    const response = await fetch('/sites/skoven-i-skolen.dk/themes/custom/sis/map/build/hih.txt');\n    let samplesRes = await response.text();\n    samplesRes = JSON.parse(samplesRes);\n\n    // Vi har tænkt os at omorganisere de rå samples\n    let measurements = {};\n    let simpleMeasurements = {};\n    let depthMeasurements = {};\n    let completeDataSets = {};\n\n    const manageSimpleSamples = (e, measurements) => {\n      /**\n       * Vi skal have en array som ser nogenlunde således ud.\n       * Dette for at tilfredsstille <table> fra ant design, som\n       * anvendes til visning af målingerne. Og selvfølgelig for at\n       * vi kan vise data på den ønskede måde.\n       * Kravet er en array bestående af objekter.\n       * Eet objekt pr række i tabellen.\n       * Hvert objekt indeholder key value par for hver detalje, der ønskes vist,\n       *\n       * Simple samples består af 2 målinger for hver stofparameter.\n       * En måling for sæson sommer og en for vinter.\n       * Visning i GUI skal bestå af een linje for hver stofparameter.\n       * Og kolonnerne er \"stofparameter\", \"sommer\", \"vinter\".\n       *\n       * {\n       *    \"54.9977,10.1604\" : {\n       *      type: \"sample\",\n       *      latitude: 54.9977,\n       *      longitude: 10.1604,\n       *      location: \"Sydlige Lillebælt\",\n       *      ui: {\n       *        \"Nitrit+nitrat-N\": {\n       *            Sommer: 1.5,\n       *            Vinter: 71,\n       *            param: \"Kvælstof\",\n       *            sortorder: 4,\n       *            unit: \"µg/l\"\n       *        },\n       *         \"Oxygen indhold\": {\n       *            Sommer: 8.729999542236328,\n       *            Vinter: 3.3299999237060547,\n       *            param: \"Temperatur\",\n       *            sortorder: 1,\n       *            unit: \"grader C\"\n       *         },\n       *          ......\n       *      }\n       *    }\n       *    \"54.8374,9.8245\" : {\n       *      .....\n       *    }\n       * }\n       */\n      // Der oprettes en key bestående af længde. og breddegrad\n      // Bruges til at samle målinger fra samme geografiske position\n      let key =\n        e.mapLocation.latitude +\n        \"\".substr(0, 6) +\n        \",\" +\n        e.mapLocation.longitude +\n        \"\".substr(0, 6);\n\n      // Hvis ny position\n      if (!measurements[key]) {\n        measurements[key] = {\n          type: \"sample\",\n          latitude: e.mapLocation.latitude,\n          longitude: e.mapLocation.longitude,\n          location: e.mapLocation.placeName,\n        };\n      }\n\n\n      if (!measurements[key].ui) {\n        measurements[key].ui = {};\n      }\n      if (!measurements[key].ui[e.element.name]) {\n        measurements[key].ui[e.element.name] = {};\n      }\n\n      //else {\n      measurements[key].ui[e.element.name][e.season] = e.result;\n\n      switch (e.element.name) {\n        case 'Salinitet':\n          measurements[key].ui[e.element.name].param = 'Salt'\n          measurements[key].ui[e.element.name].sortorder = 2\n          break;\n        case 'Temperatur':\n          measurements[key].ui[e.element.name].param = 'Temperatur'\n          measurements[key].ui[e.element.name].sortorder = 1\n          break;\n        case 'Phosphor, total-P':\n          measurements[key].ui[e.element.name].param = 'Fosfor'\n          measurements[key].ui[e.element.name].sortorder = 5\n          break;\n        case 'Oxygen indhold':\n          measurements[key].ui[e.element.name].param = 'Ilt'\n          measurements[key].ui[e.element.name].sortorder = 3\n          break;\n        case 'Nitrit+nitrat-N':\n          measurements[key].ui[e.element.name].param = 'Kvælstof'\n          measurements[key].ui[e.element.name].sortorder = 4\n          break;\n        default:\n          measurements[key].ui[e.element.name].param = e.element.name\n      };\n\n      measurements[key].ui[e.element.name].unit = e.unit;\n\n    }\n\n    const manageDepthSamples = (e, measurements) => {\n\n      // Der oprettes en key bestående af længde. og breddegrad\n      // Bruges til at samle målinger fra samme geografiske position\n      let key =\n        e.mapLocation.latitude +\n        \"\".substr(0, 6) +\n        \",\" +\n        e.mapLocation.longitude +\n        \"\".substr(0, 6);\n\n      // Hvis ny position\n      if (!measurements[key]) {\n        console.log(e)\n        measurements[key] = {\n          type: \"sample\",\n          latitude: e.mapLocation.latitude,\n          longitude: e.mapLocation.longitude,\n          location: e.mapLocation.placeName,\n        };\n      }\n\n      if (!measurements[key].ui) {\n        measurements[key].ui = {};\n      }\n\n      if (Number.isInteger(e.depth)) {\n\n        if (!measurements[key].ui[e.depth]) {\n          measurements[key].ui[e.depth] = {};\n        }\n\n        measurements[key].ui[e.depth].depth = e.depth;\n\n        if (e.season === \"Sommer\") {\n          measurements[key].ui[e.depth][e.element.name + '_sommer'] = e.result;\n        } else if (e.season === \"Vinter\") {\n          measurements[key].ui[e.depth][e.element.name + '_vinter'] = e.result;\n        }\n      }\n\n    }\n\n    const manageCompleteDataSets = () => {\n      completeDataSets = {\n        1: {\n          location: 'Flensborg Fjord',\n          latitude: 54.837367,\n          longitude: 9.8245,\n          type: 'dataset',\n          file: dataFileFlensborgFjord\n        },\n        2: {\n          location: 'Limfjorden',\n          latitude: 56.954,\n          longitude: 9.0625,\n          type: 'dataset',\n          file: dataFileLimfjorden\n        },\n        3: {\n          location: 'Odense Fjord',\n          latitude: 55.479167,\n          longitude: 10.519167,\n          type: 'dataset',\n          file: dataFileOdenseFjord\n        },\n        4: {\n          location: 'Horsens Fjord',\n          latitude: 55.844383,\n          longitude: 10.0254,\n          type: 'dataset',\n          file: dataFileHorsensFjord\n        },\n        5: {\n          location: 'Mariager Fjord',\n          latitude: 56.662667,\n          longitude: 9.973667,\n          type: 'dataset',\n          file: dataFileMariagerFjord\n        },\n        6: {\n          location: 'Øresund',\n          latitude: 55,\n          longitude: 13.3,\n          type: 'dataset',\n          file: dataFileOeresund\n        },\n      }\n    }\n\n\n    if (samplesRes) {\n      samplesRes.forEach((e) => {\n\n\n        /**\n         * Vi har brug for at filtrere i basisdata (simple) og springlagsdata (depthmeasurements) og så alle målinger, som vi jo har i forvejen.\n         * Det kan ske ved at oprette en array for hvert filter.\n         * Dvs vi her i starten af loopet tester om samplesRes indeholder 'x' i depthType.depthMeasurement eller depthType.simple eller begge.\n         * Afhængig af depthType type pusher vi målingen i en array: measurements['all'], measurements['simple'], measurements['depth'].\n         * Det er dog ikke helt så simpelt måske ? skal det være et objekt eller en array ?\n         *\n         * Efter tildeling i en type array, skal der egentlig fortsættes som før.\n         * Derfor kan vi prøve at udskille den kode til egen funktion.\n         *\n         * Resultatet skal gerne blive 3 arrays eller objekter. Een for hvert filter.\n         * I disse er så den opdeling i koordinater mv som hidtil er blevet anvendt.\n         *\n         * Lokationer kan indeholde målinger som er begge typer. Men det er ikke noget problem. Den måling kommer blot med i begge filtre.\n         * I det ene filter er denne måling en simpel. I det andet er den en dybdemåling.\n         *\n         * Der skal tages højde for (hvis det ikke allerede sker) at en lokation kan være tom for målinger af en type, f.eks. \"simple\",\n         * og at dette punkt så ikke skal vises på kortet, når der er klikket på \"Basisdata\".\n         */\n\n        if (e.depthType.simple !== \"\") {\n          manageSimpleSamples(e, simpleMeasurements);\n        }\n\n        if (e.depthType.depthMeasurement !== \"\") {\n          manageDepthSamples(e, depthMeasurements);\n        }\n      });\n\n\n    }\n\n    manageCompleteDataSets();\n\n\n    // measurements indlæses i vores lokale state, så de er tilbængelige udenfor funktionen.\n    // læg mærke til at measurements key (altså den der angiver geografiske position) smides væk\n    // og objekt values for hver key indlæses i en array.\n    // Så markers er altså en array bestående af objekter som hver især indeholder data (andre objekter) for hver geografiske position.\n    // markers er den, som anvendes ved klik på en af filterknapperne. Det fremgår af handleClick nedenfor\n    setMarkers([...Object.values(simpleMeasurements)]);\n    setSimpleMarkers([...Object.values(simpleMeasurements)]);\n    setDepthMarkers([...Object.values(depthMeasurements)]);\n    setDataMarkers([...Object.values(completeDataSets)]);\n\n       setLoading(false);\n  };\n\n  // Kører KUN een gang - ved indlæsning af siden.\n  useEffect(() => {\n    fetchMeasurements();\n  }, []);\n\n\n  const handleClick = (measurementType) => {\n    if (measurementType === 'basic') {\n      setMarkers(simpleMarkers);\n      setTable('simple');\n      setBasicIsActive(true);\n      setDepthIsActive(false);\n      setDatafilesIsActive(false);\n    } else if (measurementType === 'depth') {\n      setMarkers(depthMarkers);\n      setTable('depth');\n      setBasicIsActive(false);\n      setDepthIsActive(true);\n      setDatafilesIsActive(false);\n    } else {\n      setMarkers(dataMarkers);\n      setTable('datafiles');\n      setBasicIsActive(false);\n      setDepthIsActive(false);\n      setDatafilesIsActive(true);\n    }\n\n  }\n\n  const [scaleFactor, setScaleFactor] = useState(1);\n\n  return (\n    <>\n      <div className=\"drawer\">\n        <Row justify=\"center\">\n          <Col xs={24} lg={18}>\n\n            {/* knapperne \"Basisdata\", \"Springlagsdata\" og \"Komplet datasæt\"  */}\n            <div id=\"\" style={{ width: screens.sm ? \"160px\" : \"120px\", height: 130, backgroundColor: '', position: 'absolute', right: 20, top: 20 }}>\n              <div>\n                <div>\n                  <fieldset>\n                    <Button\n                      onClick={() => { handleClick('basic') }}\n                      target=\"_blank\"\n                      size={screens.sm ? \"large\" : \"medium\"}\n                      style={{ marginRight: 10, marginBottom: 5, width: screens.sm ? \"160px\" : \"120px\", textAlign: \"left\", backgroundColor: basicIsActive ? '#EEE' : '#EEFFFF', fontSize: screens.sm ? '' : '0.8em' }}\n                    >\n                      Basisdata\n                    </Button>\n                    <Button\n                      onClick={() => { handleClick('depth') }}\n                      target=\"_blank\"\n                      size={screens.sm ? \"large\" : \"medium\"}\n                      style={{ marginRight: 10, marginBottom: 5, width: screens.sm ? \"160px\" : \"120px\", textAlign: \"left\", backgroundColor: depthIsActive ? '#EEE' : '#EEFFFF', fontSize: screens.sm ? '' : '0.8em' }}\n                    >\n                      Springlagsdata\n                    </Button>\n                    <Button\n                      onClick={() => { handleClick('data') }}\n                      target=\"_blank\"\n                      size= {screens.sm ? \"large\" : \"medium\"}\n                      style={{ marginRight: 10, marginBottom: 10, width: screens.sm ? \"160px\" : \"120px\", textAlign: \"left\", backgroundColor: datafilesIsActive ? '#EEE' : '#EEFFFF', fontSize: screens.sm ? '' : '0.8em' }}\n                    >\n                      Komplet datasæt\n                    </Button>\n                  </fieldset>\n                </div>\n              </div>\n            </div>\n\n            <Spring\n              from={{ zoom: 1, center: [11.8, 56.15] }}\n              to={{ zoom: zoom, center: center }}\n              config={config.slow}\n            >\n              {(styles) => (\n                <ComposableMap\n                  projection=\"geoAzimuthalEqualArea\"\n                  width={mapWidth}\n                  height={mapHeight}\n                  projectionConfig={{\n                    rotate: [-11.8, -56.15, 0],\n                    scale: screens.md ? 10500 : 8000,\n                  }}\n                  data-tip=\"\"\n                  style={{\n                    backgroundColor: \"rgb(255, 255, 255)\",\n                    border: \"1px solid #d9d9d9\",\n                    borderRadius: 2,\n                  }}\n                >\n                  <ZoomableGroup\n                    // onMove og scaleFactor gør det muligt at \"låse\" størrelsen på punkterne på kortet når der zoomes.\n                    onMove={({ k }) => setScaleFactor(k)}\n                    zoom={shouldAnimate ? styles.zoom : zoom}\n                    maxZoom={20}\n                    center={shouldAnimate ? styles.center : center}\n                    translateExtent={[\n                      screens.md ? [0, 0] : [-200, -200],\n                      screens.md\n                        ? [mapWidth, mapHeight]\n                        : [mapWidth + 200, mapHeight + 200],\n                    ]}\n                    onMoveEnd={(e) => {\n                      setCenter(e.coordinates);\n                      setZoom(e.zoom);\n                    }}\n                    onMoveStart={() => setShouldAnimate(false)}\n                  >\n                    <Geographies\n                      geography={require(\"./denmark-municipalities.json\")}\n                    >\n                      {({ geographies }) =>\n                        geographies.map((geo) => (\n                          <Geography\n                            geography={geo}\n                            key={geo.properties.cartodb_id}\n                            strokeWidth=\".5px\"\n                            style={{\n                              default: {\n                                fill: loading ? \"#999\" : \"#333\",\n                                outline: \"none\",\n                              },\n                              hover: {\n                                fill: \"#333\",\n                                outline: \"none\",\n                              },\n                              pressed: {\n                                fill: \"#333\",\n                                outline: \"none\",\n                              },\n                            }}\n                          />\n                        ))\n                      }\n                    </Geographies>\n                    {markers.map((e, i) =>\n                      e.type === \"sample\" ? (\n                        <Marker key={i} coordinates={[e.longitude, e.latitude]}>\n                          <circle\n                            // ved mobilstørrelse skærm skal punkterne skalere. division med scalefactor gør at de holder størrelsen\n                            r={screens.sm ? 5 / scaleFactor : 5}\n                            fill=\"#FFF\"\n                            stroke=\"#06F\"\n                            // ved mobilstørrelse skærm skal punkterne skalere.\n                            strokeWidth={screens.sm ? 2.5 / scaleFactor : 2.5}\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => {\n                              setActiveMeasurements(e);\n                              setModalVisible(true);\n                            }}\n                          onMouseEnter={() => {\n                            setTooltip(e);\n                          }}\n                          onMouseLeave={() => setTooltip(null)}\n                          />\n                        </Marker>\n                      ) : e.latitude ? (\n                        <Marker key={i} coordinates={[e.longitude, e.latitude]}>\n                          <circle onClick={() => {\n                            setActiveMeasurements(e);\n                            setModalVisible(true);\n                          }}\n                            style={{ cursor: \"pointer\" }}\n                            r={screens.sm ? 5 / scaleFactor : 5}\n                            fill=\"#FFF\"\n                            stroke=\"#06F\"\n                            strokeWidth={screens.sm ? 2.5 / scaleFactor : 2.5}\n                          onMouseEnter={() => {\n                            setTooltip(e);\n                          }}\n                          onMouseLeave={() => setTooltip(null)}\n                          />\n                        </Marker>\n                      ) : null\n                    )}\n                  </ZoomableGroup>\n                </ComposableMap>\n              )}\n            </Spring>\n            {loading && (\n              <Row\n                justify=\"center\"\n                style={{\n                  position: \"absolute\",\n                  top: mapHeight / 2,\n                  width: \"100%\",\n                }}\n              >\n                <Spin size=\"large\" />\n              </Row>\n            )}\n\n            <ReactTooltip\n              backgroundColor=\"white\"\n            >\n              {tooltip ? (\n                  <>\n                    <h2\n                      style={{ width: \"100%\", textAlign: \"center\" }}\n                    >{tooltip.location}</h2>\n\n                  </>\n                ) : null}\n            </ReactTooltip>\n          </Col>\n        </Row>\n      </div>\n\n      {modalVisible && (\n        <MeasurementDetails\n          setModalVisible={setModalVisible}\n          measurements={activeMeasurements}\n          table={table}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Map;\n","/Users/mortenvallentinnissen/Work/novicell/skoven-i-skolen.dk/webroot/sites/skoven-i-skolen.dk/themes/custom/sis/map/src/MeasurementDetails.js",[],{"ruleId":"23","severity":1,"message":"24","line":2,"column":20,"nodeType":"25","messageId":"26","endLine":2,"endColumn":27},{"ruleId":"23","severity":1,"message":"27","line":2,"column":49,"nodeType":"25","messageId":"26","endLine":2,"endColumn":56},{"ruleId":"23","severity":1,"message":"28","line":15,"column":10,"nodeType":"25","messageId":"26","endLine":15,"endColumn":22},{"ruleId":"23","severity":1,"message":"29","line":67,"column":9,"nodeType":"25","messageId":"26","endLine":67,"endColumn":21},"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'message' is defined but never used.","'ExceptionMap' is defined but never used.","'measurements' is assigned a value but never used."]
