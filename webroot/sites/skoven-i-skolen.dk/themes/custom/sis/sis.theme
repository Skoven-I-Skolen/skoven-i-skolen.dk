<?php

use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\taxonomy\Entity\Term;

require_once 'layout_block.preprocess.inc';
require_once 'paragraph.preprocess.inc';
require_once 'node.preprocess.inc';
require_once 'input.preprocess.inc';
require_once 'term.preprocess.inc';
require_once 'form-alter.inc';


/**
 * Implements hook_locale_translation_projects_alter().
 *
 * @param $projects
 *   List of all projects
 */
function sis_locale_translation_projects_alter(&$projects) {
  $theme_handler = \Drupal::service('theme_handler');
  $path = $theme_handler->getModule('sis')->getPath();
  $projects['sis']['info']['interface translation server pattern'] = $path . '/translations/%language.po';
}
/**
 * @param $suggestions
 * @param array $variables
 */
function sis_theme_suggestions_fieldset_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type'])) {
    $suggestions[] = 'fieldset__' . $element['#type'] . '__' . reset($element['#array_parents']);
  }
}

function sis_theme_suggestions_block_alter(&$suggestions, array $variables) {
  $element = $variables['elements'];

  if(isset($element['#id']) && $element['#id'] === 'pageheader') {
    $request = \Drupal::request()->getRequestUri();
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {
      $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#id'] . '_' . str_replace('/', '_', $request);
      $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#id'] . '__node_' . $node->getType();
    }
  }
}

function sis_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $suggestion = 'menu__' . $variables['menu_name'] . '__' . $variables['attributes']['region'];
    $suggestion = str_replace('-', '_', $suggestion);
    $suggestions[] = $suggestion;
  }
}

function sis_preprocess_block(&$variables) {
  if($variables['plugin_id'] === 'premium_breadcrumb_block') {
    $variables['#cache']['max-age'] = 0;
  }
  else if (isset($variables['elements']['#id']) &&
    $variables['elements']['#id'] === 'pageheader') {
    if ($name = Drupal::requestStack()->getCurrentRequest()->get('type')) {
      if ($name === 'Aktiviteter') {
        $name = 'Aktivitet';
      }
      $variables['content']['title']['#title'] =
        new TranslatableMarkup('Create @name', ['@name' => $name]);
      $variables['#cache']['contexts'][] = 'url.query_args';
    }
  }
}

function sis_preprocess_breadcrumb(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $profile = \Drupal::routeMatch()->getParameter('profile');
  if ($node instanceof \Drupal\node\NodeInterface) {
    if ($node->getType() === 'blog_post') {
      $variables['breadcrumb'][1]['url'] = '/';
      $variables['breadcrumb'][] = [
        'text' => $node->getTitle(),
        ];
    }
    if ($node->getType() === 'news') {
      $variables['breadcrumb'][1]['url'] = '/nyhedoversigt';
    }
    else if ($node->getType() === 'blog_post') {
      $variables['breadcrumb'][1]['url'] = '/blogs';
    }
    else if ($node->getType() === 'dot_on_map') {
      $variables['breadcrumb'][1] = [
        'url' => '/kort',
        'text' => 'Kort',
      ];
      $variables['breadcrumb'][] = [
        'text' => $node->getTitle(),
      ];
    }
    else if ($node->getType() === 'article') {
      $type = $node->get('field_article_type')->first()->entity;
      if ($type && $type->hasField('field_page_link') && !$type->get('field_page_link')->isEmpty()) {
        $url = $type->get('field_page_link')->first()->getUrl();
        $variables['breadcrumb'][1]['url'] = $url->toString();
      }
    }
    if (count($variables['breadcrumb']) === 1) {
      $variables['breadcrumb'][] = [
        'text' => $node->getTitle(),
      ];
    }
  }
  else if ($profile && $profile instanceof \Drupal\profile\Entity\ProfileInterface) {
    $variables['breadcrumb'][1]['text'] = 'Visitkort';
  }
}

function sis_preprocess_menu_local_tasks(&$variables) {
  $roles = Drupal::currentUser()->getRoles();
  if (in_array('organization', $roles)) {
    // Hide the "view" link on the user profile menu tab.
    if (isset($variables["primary"]["profile.user_page:organization"]["#link"]["title"])) {
      $variables["primary"]["profile.user_page:organization"]["#link"]["title"] = t('Edit organization page');
    }
    unset($variables['primary']['entity.user.canonical']);
  }
}

/**
 * Implements hook_theme_suggestions_media_alter().
 */
function sis_theme_suggestions_media_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['elements']['#embed'])) {
    foreach ($suggestions as $suggestion) {
      $suggestions[] = $suggestion . "__embed";
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sis_preprocess_input__submit(&$variables) {
  if ($variables["element"]["#name"] === 'field_top_image_anonymous_0_upload_button') {
    $variables["attributes"]["value"] = t('Select media');
  }
  if ($variables["element"]["#name"] === 'field_top_image_entity_browser_entity_browser') {
    $variables["attributes"]["value"] = t('Select media');
  }
}
