<?php

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Render\Element;

\Drupal::moduleHandler()->loadInclude('sis_articles', 'inc', 'node.preprocess');
\Drupal::moduleHandler()->loadInclude('sis_articles', 'inc', 'user.preprocess');

function sis_articles_theme() {
  return [
    'list_element' => [
      'variables' => ['links' => [], 'article_type' => []],
    ],
    'factbox_items' => [
      'variables' => ['items' => []],
    ],
  ];
}

function sis_articles_preprocess_list_element(&$variables) {
  $fieldParent = $variables['article_type']->_referringItem->getParent()
    ->getParent()
    ->getEntity();

  if ($fieldParent->hasField('field_show_link_list') && $fieldParent->get('field_show_link_list')->value) {
    foreach (Element::children($variables['links']) as $key) {
      $variables['children'][] = $variables['links'][$key];
    }

    $variables['list_headline'] = $fieldParent->get('field_link_list_headline')->value;
    $variables['list_link_title'] = $fieldParent->get('field_link_list_title')->value;
  }
}

function sis_articles_query_sort_by_random_alter(AlterableInterface $query) {
  $query->orderRandom();
}

function sis_articles_anonymous_message() {
  Drupal::messenger()->addWarning(atom_str('pending-approval-message'));
}

function sis_articles_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $roles = Drupal::currentUser()->getRoles();
  if ($form_id === 'node_article_form') {
    $is_anon_or_org = in_array('anonymous', $roles) ||
      in_array('organization', $roles);

    if ($is_anon_or_org) {
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'sis_articles_anonymous_message';
        }
      }
    }

    if ($article_type = Drupal::requestStack()->getCurrentRequest()->get('type')) {
      if (!isset($form['field_article_type']['widget']['#options'])) {
        return;
      }
      foreach ($form['field_article_type']['widget']['#options'] as $key => $value) {
        if ($value === $article_type) {
          $form['field_article_type']['widget']['#default_value'] = $key;
          if ($is_anon_or_org) {
            $form['field_article_type']['#access'] = FALSE;
          }
        }
        else {
          unset($form['field_article_type']['widget']['#options'][$key]);
        }
      }
    }
    else if ($is_anon_or_org) {
      header('Location: /');
    }
  }

  if (in_array('anonymous', $roles) || in_array('organization', $roles)
    || in_array('writer', $roles)) {
    // Hide fields that are not relevant for anonymous users and organizations.
    if (isset($form['revision_information']['#access'])) {
      $form['revision_information']['#access'] = FALSE;
    }
    if (isset($form['revision']['#access'])) {
      $form['revision']['#access'] = FALSE;
    }
    if (isset($form['moderation_state']['#access'])) {
      $form['moderation_state']['#access'] = FALSE;
    }
    if (isset($form['revision_log']['#access'])) {
      $form['revision_log']['#access'] = FALSE;
    }
    if (isset($form["field_graphics"]['#access'])) {
      $form["field_graphics"]["#access"] = FALSE;
    }
    // The next condition will be controlled from Field Permission module.
    // if (isset($form["field_header"]['#access'])) {
    //   $form["field_header"]['#access'] = FALSE;
    // }
    if (isset($form["revision_information"]['#access'])) {
      $form["revision_information"]['#access'] = FALSE;
    }
    if (isset($form['meta']['#access'])) {
      $form['meta']['#access'] = FALSE;
    }
    if (isset($form['field_organization_overview']['#access'])) {
      $form['field_organization_overview']['#access'] = FALSE;
    }
    if (isset($form['field_section_bg_graphics']['#access'])) {
      $form['field_section_bg_graphics']['#access'] = FALSE;
    }
    if (isset($form['field_section_bg_graphics_pos']['#access'])) {
      $form['field_section_bg_graphics_pos']['#access'] = FALSE;
    }
  }

  else if ($form_id === 'views_form_media_library_page' || 'views_form_media_library_widget_document') {
    $form['#attached']['library'][] = 'sis/media-library';
  }


}

/**
 * Implements hook_preprocess_HOOK().
 */
function sis_articles_preprocess_menu(&$variables) {
  if ($variables['menu_name'] === 'meta-menu') {
    if (!$variables['logged_in']) {
      unset($variables['items']['sis_articles.add_content']);
    }
  }
}
