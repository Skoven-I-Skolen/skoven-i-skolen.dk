<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\entity_overview\OverviewFilter;
use Drupal\node\Entity\Node;
use Relewise\Factory\DataValueFactory;
use Relewise\Models\ContainsCondition;
use Relewise\Models\ContainsConditionCollectionArgumentEvaluationMode;
use Relewise\Models\ContentDataFilter;
use Relewise\Models\ContentRecommendationRequestSettings;
use Relewise\Models\FilterCollection;
use Relewise\Models\PopularContentsRequest;
use Relewise\Models\ValueConditionCollection;

/**
 * Implements hook_locale_translation_projects_alter().
 */
function sis_relewise_locale_translation_projects_alter(&$projects) {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('sis_relewise')->getPath();
  $projects['sis_relewise']['info']['interface translation server pattern']
    = $path . '/translations/%language.po';
}

/**
 * Relewise content alter.
 *
 * @param \Relewise\Models\Content $content
 */
function sis_relewise_relewise_content_alter(\Relewise\Models\Content &$content, EntityInterface $entity) {
  /** @var \Drupal\relewise\Relewise $relewise */
  $relewise = \Drupal::service('relewise');

  if ($entity->getEntityTypeId() == 'node') {
    /** @var Node $node */
    $node = $entity;
    $langcode = $entity->language()->getId();
    $language = $relewise->languageFromLanguageCode($langcode);

    $bundle = \Drupal::entityTypeManager()->getStorage($node->getEntityType()->getBundleEntityType())->load($node->bundle());
    $content->addToData('bundle_label', DataValueFactory::multilingualCollectionWithSingleLanguage($language, $bundle->label()));

    if ($node->hasField('field_article_type') && !$node->get('field_article_type')
        ->isEmpty()) {
      $tid = $node->get('field_article_type')
        ->first()
        ->getValue()['target_id'];
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
      if ($term) {
        $content->addToData('field_article_type_label', DataValueFactory::string($term->label()));
      }
    }
  }
  elseif ($entity->getEntityTypeId() == 'profile') {
    /** @var \Drupal\profile\Entity\Profile $profile */
    $profile = $entity;
    $langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
    $language = $relewise->languageFromLanguageCode($langcode);

    $bundle = \Drupal::entityTypeManager()->getStorage($profile->getEntityType()->getBundleEntityType())->load($profile->bundle());
    $content->addToData('bundle_label', DataValueFactory::multilingualCollectionWithSingleLanguage($language, $bundle->label()));

    if ($profile->hasField('field_organization_address') && !$profile->get('field_organization_address')
        ->isEmpty()) {
      $content->addToData('field_organization_address', DataValueFactory::string($profile->get('field_organization_address')->first()->getValue()['organization'] ?? ''));
    }
    if ($profile->hasField('field_article_type') && !$profile->get('field_article_type')
        ->isEmpty()) {
      $tid = $profile->get('field_article_type')
        ->first()
        ->getValue()['target_id'];
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
      if ($term) {
        $content->addToData('field_article_type_label', DataValueFactory::string($term->label()));
      }
    }
  }
  return $content;
}

/**
 * Implements hook_entity_overview_facet_options_alter().
 */
function sis_relewise_entity_overview_facet_options_alter(&$facet_options, OverviewFilter $filter) {
  unset($facet_options['count']);
  unset($facet_options['owner']);
}

/**
 * Implements hook_theme().
 */
function sis_relewise_theme($existing, $type, $theme, $path) {
  return [
    'sis_relewise_most_popular' => [
      'variables' => [],
    ],
  ];
}

/**
 * Most popular content preprocess.
 *
 * @param array $variables
 *   Template variables.
 */
function sis_relewise_preprocess_sis_relewise_most_popular(array &$variables) {
  $variables['cache']['max-age'] = 60*60*24;
  /** @var \Drupal\relewise\Relewise $relewise */
  $relewise = \Drupal::service('relewise');
  try {
    $recommender = $relewise->getRecommender();

    $filters = [];
    $filters[] = ContentDataFilter::create('bundle')
      ->setConditions(ValueConditionCollection::create(ContainsCondition::create(FALSE)
        ->setValue(DataValueFactory::string('article'))
        ->setValueCollectionEvaluationMode(ContainsConditionCollectionArgumentEvaluationMode::Any)));
    $collection = FilterCollection::create(... $filters);
    $settings = ContentRecommendationRequestSettings::create();
    $settings->setNumberOfRecommendations(4);

    $request = PopularContentsRequest::create(
      $relewise->getCurrentLanguage(),
      $relewise->getCurrentCurrency(),
      $relewise->getDisplayLocation(),
      $relewise->getCurrentUser(),
    );
    $request->setSettings($settings);
    $request->setFilters($collection);
    $result = $recommender->popularContents($request);

    $nodes = $relewise->getEntitiesFromResults($result->recommendations, 'contentId');
  } catch (Exception $exception) {
    $nodes = [];
  }
  if (!empty($nodes)) {
    $variables['nodes'] = \Drupal::entityTypeManager()
      ->getViewBuilder('node')
      ->viewMultiple($nodes, 'teaser');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sis_relewise_form_entity_overview_search_page_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['keyword'] = [
    '#markup' => \Drupal::request()->get('text')
  ];
}
