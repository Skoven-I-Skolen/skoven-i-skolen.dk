<?php
/**
 * @file
 * Help functions.
 */


use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sis_misc_form_editor_image_dialog_alter(&$form, FormStateInterface $form_state) {
  if (isset($form_state->getUserInput()['editor_object'])) {
    // By convention, the data that the text editor sends to any dialog is in
    // the 'editor_object' key. And the image dialog for text editors expects
    // that data to be the attributes for an <img> element.
    $image_element = $form_state->getUserInput()['editor_object'];
  }
  else {
    // Retrieve the image element's attributes from form state.
    $image_element = $form_state->get('image_element') ?: [];
  }

  $form['attributes']['data-image-size'] = [
    '#type' => 'select',
    '#options' => [
      'small' => t('Small'),
      'medium' => t('Medium'),
      'large' => t('Large'),
    ],
    '#title' => t('Image size'),
    '#default_value' => $image_element['data-image-size'] ?? ''
  ];
  $form['align']['#access'] = FALSE;
}

/**
 * Implements hook_entity_access().
 */
function sis_misc_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() === 'profile') {
    return AccessResult::allowedIfHasPermission($account, 'manage profile entities');
  }
}

/**
 * Implements hook_entity_access().
 */
function sis_misc_views_pre_render(ViewExecutable $view) {
  // Only doing this for the media library view.
  if ($view->id() === 'media_library') {
    $current_user = \Drupal::currentUser();
    $admin_roles = [
      'administrator',
      'editor',
      'webmaster',
    ];
    $is_admin = count(array_intersect($admin_roles, $current_user->getRoles()));
    $result = [];

    // If the user is non-admin, display only media authored by that user.
    if (!$is_admin) {
      foreach ($view->result as $key => $row) {
        $entity = $row->_entity;
        if ($entity->getOwnerId() == $current_user->id()) {
          $result[$key] = $row;
        }
      }
      $view->result = $result;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function sis_misc_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state) {
  $form['attributes']['data-entity-embed-display-settings']['image_style']['#access'] = \Drupal::currentUser()->hasPermission('administer media');
  $form['attributes']['data-entity-embed-display-settings']['image_loading']['#access'] = \Drupal::currentUser()->hasPermission('administer media');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sis_misc_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['options']['#access'] = \Drupal::currentUser()->hasPermission('bypass node access');

  $user = \Drupal::currentUser();
  $roles = $user->getRoles();

  $anonymous = array_intersect($roles, ['anonymous', 'organization', 'writer']);
  $logged_in = array_intersect($roles, ['administrator', 'editor', 'webmaster']);

  $form['field_list_media']['widget']['#required'] = !empty($logged_in);
  $form['field_list_media_anonymous']['widget'][0]['#required'] = !empty($anonymous);
}

/**
 * Implements hook_simple_sitemap_links_alter().
 */
function sis_misc_simple_sitemap_links_alter(array &$links) {
  foreach ($links as $key => $link) {
    $url = preg_replace('/^http:/', 'https:', $link['url']);
    $links[$key]['url'] = $url;
  }
}
