<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\media_library\MediaLibraryState;
use Drupal\views\ViewExecutable;

require_once __DIR__ . '/includes/layout-builder.inc';

/**
 * Alter the list of projects to be updated by locale's interface translation.
 *
 * Locale module attempts to update the translation of those modules returned
 * by \Drupal\update\UpdateManager::getProjects(). Using this hook, the data
 * returned by \Drupal\update\UpdateManager::getProjects() can be altered or
 * extended.
 *
 * Modules or distributions that use a dedicated translation server should use
 * this hook to specify the interface translation server pattern, or to add
 * additional custom/non-Drupal.org modules to the list of modules known to
 * locale.
 * - "interface translation server pattern": URL of the .po translation files
 *   used to download the files from. The URL contains tokens which will be
 *   replaced by appropriate values.
 * The following tokens are available for the server pattern:
 * - "%core": Core version. Value example: "8.x".
 * - "%project": Project name. Value examples: "drupal", "media_gallery".
 * - "%version": Project version release. Value examples: "8.1", "8.x-1.0".
 * - "%language": Language code. Value examples: "fr", "pt-pt".
 *
 * @param array $projects
 *   Project data as returned by \Drupal\update\UpdateManager::getProjects().
 *
 * @see locale_translation_project_list()
 * @ingroup interface_translation_properties
 */
function premium_theme_helper_locale_translation_projects_alter(array &$projects) {
  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('premium_theme_helper')->getPath();
  $projects['premium_theme_helper']['info']['interface translation server pattern'] = $path . '/translations/%language.po';
}

/**
 * Implements hook_entity_base_field_info().
 */
function premium_theme_helper_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];

  if ($entity_type->id() == 'menu_link_content') {
    $fields['icon'] = BaseFieldDefinition::create('icon_field')
      ->setLabel(t('Icon'))
      ->setDescription(t('Add icon to menu item'))
      ->setDisplayOptions('form', [
        'type' => 'icon_field',
        'weight' => '0',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Control access for icon field.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function premium_theme_helper_form_menu_link_content_menu_link_content_form_alter(array &$form, FormStateInterface $form_state): void {
  $name = $form_state->getFormObject()->getEntity()->getMenuName();
  // Hide the menu related fields for any menu that is not the main menu.
  if ($name !== 'main') {
    $form['icon']['#access'] = FALSE;
  }
}
